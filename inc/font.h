#ifndef _FONT_H_
#define _FONT_H_

#include <stdbool.h>

#include "ppm_image.h"

typedef enum {
    CP_NUL,
    CP_SMILE_1,
    CP_SMILE_2,
    CP_HEARTS,
    CP_DIAMONDS,
    CP_CLUBS,
    CP_SPADES,
    CP_BULLET_1,
    CP_BULLET_2,
    CP_CIRCLE_1,
    CP_CIRCLE_2,
    CP_MALE,
    CP_FEMALE,
    CP_QUAVER_1,
    CP_QUAVER_2,
    CP_SUN,
    CP_TRI_R,
    CP_TRI_L,
    CP_ARROW_UD,
    CP_EXCLAMATION_D,
    CP_PARAGRAPH,
    CP_SECTION,
    CP_RECTANGLE,
    CP_ARROW_UD_B,
    CP_ARROW_U,
    CP_ARROW_D,
    CP_ARROW_R,
    CP_ARROW_L,
    CP_ANGLE_R,
    CP_ARROW_LR,
    CP_TRI_U,
    CP_TRI_D,
    CP_SPACE,
    CP_EXCLAMATION,
    CP_QUOTE,
    CP_CARDINAL,
    CP_DOLLAR,
    CP_PERCENT,
    CP_AND,
    CP_APOSTROPHE,
    CP_PARENTHESIS_L,
    CP_PARENTHESIS_R,
    CP_ASTERISK,
    CP_PLUS,
    CP_COMMA,
    CP_MINUS,
    CP_FULL_STOP,
    CP_SLASH_F,
    CP_ZERO,
    CP_ONE,
    CP_TWO,
    CP_THREE,
    CP_FOUR,
    CP_FIVE,
    CP_SIX,
    CP_SEVEN,
    CP_EIGHT,
    CP_NINE,
    CP_COLON,
    CP_SEMICOLON,
    CP_LESSER,
    CP_EQUAL,
    CP_GREATER,
    CP_QUESTION,
    CP_AT,
    CP_A_C,
    CP_B_C,
    CP_C_C,
    CP_D_C,
    CP_E_C,
    CP_F_C,
    CP_G_C,
    CP_H_C,
    CP_I_C,
    CP_J_C,
    CP_K_C,
    CP_L_C,
    CP_M_C,
    CP_N_C,
    CP_O_C,
    CP_P_C,
    CP_Q_C,
    CP_R_C,
    CP_S_C,
    CP_T_C,
    CP_U_C,
    CP_V_C,
    CP_W_C,
    CP_X_C,
    CP_Y_C,
    CP_Z_C,
    CP_BRACKET_L,
    CP_SLASH_B,
    CP_BRACKET_R,
    CP_CIRCUMFLEX,
    CP_UNDERSCORE,
    CP_GRAVE,
    CP_A,
    CP_B,
    CP_C,
    CP_D,
    CP_E,
    CP_F,
    CP_G,
    CP_H,
    CP_I,
    CP_J,
    CP_K,
    CP_L,
    CP_M,
    CP_N,
    CP_O,
    CP_P,
    CP_Q,
    CP_R,
    CP_S,
    CP_T,
    CP_U,
    CP_V,
    CP_W,
    CP_X,
    CP_Y,
    CP_Z,
    CP_CURLYBRACKET_L,
    CP_VERTLINE,
    CP_CURLYBRACKET_R,
    CP_HOUSE,
    CP_C_C_CEDILLA,
    CP_U_DIAERESIS,
    CP_E_ACUTE,
    CP_A_CIRCUMFLEX,
    CP_A_DIAERESIS,
    CP_A_GRAVE,
    CP_A_RING,
    CP_C_CEDILLA,
    CP_E_CIRCUMFLEX,
    CP_E_DIAERESIS,
    CP_E_GRAVE,
    CP_I_DIAERESIS,
    CP_I_CIRCUMFLEX,
    CP_I_GRAVE,
    CP_A_C_DIAERESIS,
    CP_A_C_RING,
    CP_E_C_ACUTE,
    CP_AE,
    CP_AE_C,
    CO_O_CIRCUMFLEX,
    CP_O_DIAERESIS,
    CP_O_GRAVE,
    CP_U_CIRCUMFLEX,
    CP_U_GRAVE,
    CP_Y_DIAERESIS,
    CP_O_C_DIAERESIS,
    CP_U_C_DIAERESIS,
    CP_CENT,
    CP_POUND,
    CP_YEN,
    CP_PESETA,
    CP_F_HOOK,
    CP_A_ACUTE,
    CP_I_ACUTE,
    CP_O_ACUTE,
    CP_U_ACUTE,
    CP_N_TILDE,
    CP_N_C_TILDE,
    CP_ORDINAL_A,
    CP_ORDINAL_O,
    CP_QUESTION_INV,
    CP_NOT_INV,
    CP_NOT,
    CP_HALF,
    CP_QUARTER,
    CP_EXCLAMATION_INV,
    CP_LESSER_D,
    CP_GREATER_D,
    CP_SHADE_L,
    CP_SHADE_M,
    CP_SHADE_H,
    CP_BOX_U_D,
    CP_BOX_U_D_LD,
    CP_BOX_UD_DD_L,
    CP_BOX_DD_L,
    CP_BOX_D_LD,
    CP_BOX_UD_DD_LD,
    CP_BOX_UD_DD,
    CP_BOX_DD_LD,
    CP_BOX_UD_LD,
    CP_BOX_UD_L,
    CP_BOX_U_LD,
    CP_BOX_D_L,
    CP_BOX_U_R,
    CP_BOX_U_L_R,
    CP_BOX_D_L_R,
    CP_BOX_U_D_R,
    CP_BOX_L_R,
    CP_BOX_U_D_L_R,
    CP_BOX_U_D_RD,
    CP_BOX_UD_DD_R,
    CP_BOX_UD_RD,
    CP_BOX_DD_RD,
    CP_BOX_UD_LD_RD,
    CP_BOX_DD_LD_RD,
    CP_BOX_UD_DD_RD,
    CP_BOX_LD_RD,
    CP_BOX_UD_DD_LD_RD,
    CP_BOX_U_LD_RD,
    CP_BOX_UD_L_R,
    CP_BOX_D_LD_RD,
    CP_BOX_DD_L_R,
    CP_BOX_UD_R,
    CP_BOX_U_RD,
    CP_BOX_DD_R,
    CP_BOX_UD_DD_L_R,
    CP_BOX_U_D_LD_RD,
    CP_BOX_U_L,
    CP_BOX_D_R,
    CP_SQUARE_1,
    CP_RECT_B,
    CP_RECT_L,
    CP_RECT_R,
    CP_RECT_U,
    CP_ALPHA,
    CP_BETA,
    CP_GAMMA,
    CP_PI,
    CP_SIGMA_C,
    CP_SIGMA,
    CP_MICRO,
    CP_TAU,
    CP_PHI_C,
    CP_THETA,
    CP_OMEGA,
    CP_DELTA,
    CP_INFINITY,
    CP_PHI,
    CP_EPSILON,
    CP_INTERSECTION,
    CP_IDENTICAL,
    CP_MORE_LESS,
    CP_GREATER_EQUAL,
    CP_LESSER_EQUAL,
    CP_INTEGRAL_TH,
    CP_INTEGRAL_BH,
    CP_DIVISION,
    CP_ALMOST_EQUAL,
    CP_DEGREE,
    CP_BULLET_OP,
    CP_MIDDLE_DOT,
    CP_SQRT,
    CP_ORDINAL_N,
    CP_SQUARED,
    CP_SQUARE_2,
    CP_NOBREAK
} CP_437;

typedef struct {
    bool* data;
    size_t width;
    size_t height;
    size_t char_width;
    size_t char_height;
} Font;

Font* font_load_ppm(const char* filename, size_t char_width, size_t char_height);
void font_free(void* font);
void font_set(Font* font, size_t x, size_t y, bool b);
bool font_get(Font* font, size_t x, size_t y);
void font_get_char(Font* font, size_t char_index, bool** buffer);

#endif
